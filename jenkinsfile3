pipeline {
    agent any
    tools {
        jdk 'JDK17'
        nodejs 'node23'
    }
    //environment {
        //SCANNER_HOME = tool 'sonar-scanner'
    //}
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/hanuscm/Book-my-show.git'
                sh 'ls -la'  // Verify files after checkout
            }
        }
        stage('SonarQube Analysis') {
            steps {
                sh '/opt/sonar-scanner-5.0.1.3006-linux/bin/sonar-scanner ' +
                         '-Dsonar.projectName=test ' +
                         '-Dsonar.projectVersion=test ' +
                         '-Dsonar.projectKey=1.0 ' +
                         '-Dsonar.sources=/var/lib/jenkins/workspace/pipeline-docker/bookmyshow-app/src ' +
                         '-Dsonar.java.binaries=/var/lib/jenkins/workspace/pipeline-docker/bookmyshow-app/target/classes ' +
                         '-Dsonar.host.url=http://localhost:9000 ' +
                         '-Dsonar.token=sqa_efe87919cd591baf02f90f4b5fe23341e370b910'
                }
            }
        
        //stage('Quality Gate') {
            //steps {
                //script {
                    //waitForQualityGate abortPipeline: false, credentialsId: 'sqa_efe87919cd591baf02f90f4b5fe23341e370b910'
                //}
            //}
        //}
        stage('Install Dependencies') {
            steps {
                sh '''
                cd bookmyshow-app
                ls -la  # Verify package.json exists
                if [ -f package.json ]; then
                    rm -rf node_modules package-lock.json  # Remove old dependencies
                    npm install --force  # Install fresh dependencies
                    npm audit fix --force & sleep 10 & sleep 100 & npm audit fix --force & sleep 100 & npm fund
                else
                    echo "Error: package.json not found in bookmyshow-app!"
                    exit 1
                fi
                '''
            }
        }
        
        stage('Docker Build & Push') {
            steps {
                script {
                    //withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh ''' 
                        echo "Building Docker image..."
                        chmod 775  ${WORKSPACE}/bookmyshow-app/Dockerfile
                        docker build --no-cache -t sailajajaswi/dockerhub:latest -f ${WORKSPACE}/bookmyshow-app/Dockerfile bookmyshow-app

                        echo "Pushing Docker image to registry..."
                        docker login --username sailajajaswi --password Hany@7869
                        docker push sailajajaswi/dockerhub:latest
                        '''
                    //}
                }
            }
        }
        stage('Deploy to Container') {
            steps {
                sh ''' 
                  echo "Stopping and removing old container..."
                  #docker stop bms || true
                  #docker rm bms || true

                  echo "Running new container on port 3000..."
                  #docker run -d --restart=always --name bms -p 3000:3000 sailajajaswi/dockerhub:latest

                  echo "Checking running containers..."
                  docker ps -a

                  echo "Fetching logs..."
                  sleep 5  # Give time for the app to start
                  #docker logs bms
                  kubectl delete deployment bms-app --ignore-not-found
                  kubectl apply -f deployment.yml --validate=false
                  sleep 800
                  #kubectl port-forward deployment/bms-app 3000:3000 &
                  kubectl get pods
                '''
            }
            stage('Port Forward') {
              steps {
                script {
                    // Run port-forward in background
                    sh 'kubectl port-forward deployment/bms-app 3000:3000 &'
                    
                    // Get the PID of the background process
                    pid = sh(script: "ps -ef | grep 'kubectl port-forward deployment/bms-app' | grep -v grep | awk '{print \$2}'", returnStdout: true).trim()
                    
                    // Store the PID so we can kill it later
                    echo "Port-forward running with PID: ${pid}"
                    
                    // Add some delay to verify it's working (remove in production)
                    sleep(time: 10, unit: 'SECONDS')
                    
                    // You would typically do your work here that needs the port-forward
                    
                    // Kill the port-forward when done
                    sh "kill ${pid}"
                }
             }
        }
        }
		
       
		
	  }
    }
    
//}
