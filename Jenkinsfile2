
pipeline {
    agent any

    tools {
        jdk 'jdk17'
        nodejs 'node23'
    }

    environment {
        //SCANNER_HOME = tool 'sonar-scanner'
        DOCKER_IMAGE = 'sailajajaswi/dockerhub:latest'
        //EKS_CLUSTER_NAME = 'kastro-eks'
        //AWS_REGION = 'us-east-1'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/hanuscm/Book-my-show.git'
                sh 'ls -la'  // Verify files after checkout
            }
        }

        stage('SonarQube Analysis') {
            steps {
                sh '/opt/sonar-scanner-5.0.1.3006-linux/bin/sonar-scanner ' +
                         '-Dsonar.projectName=test ' +
                         '-Dsonar.projectVersion=test ' +
                         '-Dsonar.projectKey=1.0 ' +
                         '-Dsonar.sources=/var/lib/jenkins/workspace/pipeline-docker/bookmyshow-app/src ' +
                         '-Dsonar.java.binaries=/var/lib/jenkins/workspace/pipeline-docker/bookmyshow-app/target/classes ' +
                         '-Dsonar.host.url=http://localhost:9000 ' +
                         '-Dsonar.token=sqa_efe87919cd591baf02f90f4b5fe23341e370b910'
                }
            }
        }

        

        stage('Install Dependencies') {
            steps {
                sh '''
                cd bookmyshow-app
                ls -la  # Verify package.json exists
                if [ -f package.json ]; then
                    rm -rf node_modules package-lock.json  # Remove old dependencies
                    npm install  # Install fresh dependencies
                else
                    echo "Error: package.json not found in bookmyshow-app!"
                    exit 1
                fi
                '''
            }
        }

        

        stage('Docker Build & Push') {
            steps {
                script {
                    //withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh ''' 
                        echo "Building Docker image..."
                        chmod 775  ${WORKSPACE}/bookmyshow-app/Dockerfile
                        docker build --no-cache -t sailajajaswi/dockerhub:latest -f ${WORKSPACE}/bookmyshow-app/Dockerfile bookmyshow-app

                        echo "Pushing Docker image to registry..."
                        docker login --username sailajajaswi --password Hany@7869
                        docker push sailajajaswi/dockerhub:latest
                        
                        '''
                    //}
                }
            }
        }

        stage('Deploy to local machine ') {
            steps {
                script {
                    sh '''
                    
                    kubectl apply -f deployment.yml
                    //kubectl apply -f service.yml

                    echo "Verifying deployment..."
                    kubectl get pods
                    kubectl get svc
                    '''
                }
            }
        }
    }

    post {
        always {
            emailext attachLog: true,
                subject: "'${currentBuild.result}'",
                body: "Project: ${env.JOB_NAME}<br/>" +
                      "Build Number: ${env.BUILD_NUMBER}<br/>" +
                      "URL: ${env.BUILD_URL}<br/>",
                to: 'kastrokiran@gmail.com',
                attachmentsPattern: 'trivyfs.txt'
        }
    }

